
= Introduction =
AS is a graphical environment for algorithmic composition, where music is
constructed directly in an interactive graphical score. This section gives
an introduction to the features and concepts of AS.

AS is free software and a project under active development, distributed under
the terms of [GNU General Public License http://www.gnu.org/licenses/gpl.html].

 [example.png] 

== The score ==
Graphical objects are placed in a timeline and connected together. Some objects
are user-interactive and depend on user data, while some are generative
and react on input from other objects. Each individual object also has a
set of user-editable properties.

Each object can have many inputs and outputs,
and the outputs can be connected to multiple objects and inputs. Different
objects can also be used as input at different times.
This allows the creation of complex networks where graphical objects react
on each other. Since the objects exists in a timeline, this network is not
static but can change over time.

Objects can visualize their data directly in the score, which is a helpful
aid in the process of algorithmic composition. When the composer changes a
connection, moves an object, or alters some property of an object, the
resultant change is immediately updated in the visual representation.

The kind of data sent between objects (and visualized by objects) is mostly
either discrete events with arbitrary parameters, or continuous numerical
control data as an array of values or as interpolated break-point curves.
But any kind of data can be sent: strings, vectors, tables, or even functions
or references to other objects.

Since the composer works directly with the score, there's no need for an
additional step of creating a graphical score of the piece. The
score is already there, and can be exported to PDF for printing or publishing,
or SVG for importing into other applications.

== Non-realtime ==
AS has a non-realtime perspective, where the composer can relate freely
to time and construct the composition outside of time. This makes AS more
like a traditional sequencer in this regard, but a graphical algorithmic
sequencer with powerful and flexible scripting abilities.

The non-realtime
concept also means that an object has the ability to access //all// data of
another object in a single moment, instead of beeing limited to the streaming
data of a current "now". Both the composer and the individual objects are thus
unbound by time and can relate to both past and future.

== Output ==
The data can be output from AS by connecting objects to one or more special
output busses.
The result is output as audio (through the built-in [Csound #csound] interface),
arbitrary control signals, OSC (OpenSoundControl), or MIDI.

The csound bus takes events, control data
and function tables from other objects and sends them to csound, which renders
it to audio in a background process according to a given orchestra file.
The audio can then be played back through
[JACK Audio Connection Kit #jack], or exported to a
soundfile. Playback can be started before the rendering is finished, much like
when streaming media on the web.

The control signal bus takes any numerical data, samples it in a specified
samplerate, and sends it on a JACK port as an audio signal. This gives the
possibility of high-resolution control of other software.

The OSC bus takes events and outputs them to specified address and OSC paths.

The MIDI bus takes note events and control data and sends it on a
JACK midi port.

== Scripting ==
AS is highly customizable and extendible with the
[Nasal #nasal] scripting language.

It's relatively easy to make your own classes (types of objects) from scratch or
derived from an existing class, and there are also classes that allow the
composer to use nasal code directly in the score for generating or transforming
events or control data. Each connection also has a //transfer func// property, allowing
the data to be transformed according to nasal code (a simple mathematical expression,
for example). There is also classes with similar features.

The advanced user can build their own library of [custom #custom] classes and functions.
It's easy for users to share classes with each other, just put the file in
your //user_data// folder and it will be loaded automatically.
Since the classes are written in an interpreted
scripting language, no compilation-step is needed.

Actually, most of AS is written in [Nasal #nasal], with a core written in C.
AlgoScore has a built-in Nasal interpreter  that can be used to access the score
and objects programatically, or even create your own GUI applications from
scratch.
