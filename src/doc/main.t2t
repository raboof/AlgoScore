AlgoScore users guide
Copyright 2008, Jonatan Liljedahl <lijon@kymatica.com>
Last edited: %%date(%Y-%m-%d)

%! Target  : xhtml
%! Style   : as.css
%! Encoding: iso-8859-1
%! Options : --toc --toc-level=2 --css-inside --css-sugar
%!preproc  : ([\W]|^)AS([\W]|$) \1AlgoScore\2
%!postproc(xhtml): ##(.*?)##  <span class="key">\1</span>
%!postproc(xhtml): @@ <BR>
%!postproc(lout):  \"#\"\"#\"(.*?)\"#\"\"#\"  [\1]

% TODO:
% getting started
% preferences: go through all, tell some about themes and palettes
% included classes: show class inheritance, pics of objects?
% customization
% internals
% nasal library modules
% faq?
% tips and tricks?
% show class inheritance in included classes?
% describe props of base classes...

//The latest version of this document can be found at// http://download.gna.org/algoscore/Help/algoscore-manual.html

%!include: intro.t2t
%!include: install.t2t

= Getting started =
**TODO** Simple "hello world" tutorial. Pointers to examples in appendix?

You might want to take a look at [Using AlgoScore #using].
Also take a look at the [Examples #examples].

%!include: using.t2t

%!include: output.t2t

= Included classes =

%!include: classes.inc

= Programming =
This section will cover information for advanced usage of AS like internal
workings, baseclass and library references, etc...

== Internals ==
**TODO** updating and dependency tree, redrawing, etc..

== Data formats and communication ==

=== Events or samples ===
There are two ways data is stored in objects:

: Samples
  An array of values where each element corresponds to a time increment (in seconds)
  specified in ``outlet.resolution``.
: Events
  A list of events in the format ``[t,value]``. This mode is
  indicated by setting ``outlet.resolution`` to zero.


The actual values can be of any type.

A destination object can use ``connection.get_resolution()`` to get the value of ``outlet.resolution``.

=== Value by time or index ===
There are two ways for an object to get data from another object. One is
to get the current value at time //t//, the other is to get events by index //i//.

The convenient way of getting value by time is by first creating a getter function for the specified inlet:
```
inlet = me.inlets["my_inlet"];
getter_func = inlet.val_finder(default_value);
```
The value of //inlet// at time //t// can then be retreived
by calling ``getter_func(t)``. //t// is counted in seconds from the start of the destination object.
What this does behind the scenes is to find the relevant connection at time //t//
and then getting the value at time //t// from this connection by calling ``connection.get_value(t)``.
Overlapping source objects overrides previous ones.

The way of getting events by index is by first getting a list of the connections of a specified inlet
and then looping through them and getting each event:
```
inlet = me.inlets["my_inlet"];
connections = inlet.get_connections();
foreach(con; connections) {
  for(i=0; i<con.datasize; i+=1) {
    ev=con.get_event(i);
    ...
  }
}
```
Getting events by index means that it's possible to handle overlapping source objects and multiple events
with the same onset time.

``connection.get_value(t)`` and ``connection.get_event(i)`` calls ``source_obj.get_value(outlet,t)``
and ``source_obj.get_event(outlet,i)``. These methods can be overridden by subclasses, the default methods
fetches data from the ``outlet.data`` vector.

The ``outlet.interpolate`` flag indicates if the outlet contains data that is interpolatable,
which means that a ``get_value(t)`` where t is between two events or samples will interpolate the returned value
through ``source_obj.interpolate(outlet,a,b,x)``. This flag is available through ``connection.get_interpolate()``.

The interpolate flag should be set for curve-like continous data, and unset for
discrete events like csound or midi note events. Many objects look at this flag to determine if it should
get event by index or value by time, for example the OSC bus.

See documentation for [Inlet #Inlet] and [Connection #Connection] classes for more information.

== Customization ==[custom]
**TODO** user_data_dir for custom classes and libs, general guide-lines
for writing your own classes, with pointers to the subsections below...

%!include: baseclasses.inc

== Nasal libraries ==
The official nasal library docs can be seen [here nasal-lib.html].
**TODO** copy the relevant parts from above doc and also include additional
libs by algoscore, modifications, etc...

%!include: examples.t2t
%!include: osxbuild.t2t
%!include: softs.t2t

