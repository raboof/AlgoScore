
= Getting output =
This section gives an overview of the ways of getting output from AS.
This is done through special //output busses//.
There is currently a Csound bus, a control signal bus,
an OpenSoundControl bus, and a MIDI bus class available.

== Csound bus ==
AS can use [Csound #csound] to produce sound which can be played back through
[JACK #jack] or
exported to an audiofile. It interfaces to Csound through objects of the
[csound_bus #csound_bus_class] class. Each ``csound_bus`` object is an instance of Csound.

=== Orchestra ===

After you created a ``csound_bus`` you should give it an orchestra file. This is done by
setting the ``orc_file`` property on the bus. You need to use an external editor to create
and edit the orchestra file. The csound orchestra syntax is beyond the scope of this
manual, see http://www.csounds.com for tutorials and more information on csound.

The
orchestra file is searched in the current folder or the folder where the project is saved.
It's recommended that you start by saving the project in a folder so you know where to
place the orchestra file.

If you edit the orchestra file you need to press ##u## on the csound bus to make it reload
the orchestra, since AS won't know about things you do with an external text
editor.

You can set your favorite text editor in the [Preferences #prefs], pressing ##e## on the csound
bus will then bring up the orchestra file of that bus in the editor.

=== Inlets ===

The csound bus has inlets for events and ftabs. Also all software channels
exported from the orchestra by the ``chnexport`` opcode will show up here,
allowing k-rate control of global variables in the orchestra.

You can use ``cs_instr`` or ``cs_instr_graph`` objects to send single
instrument events, or use nasal code in ``datagen`` objects to generate
them algorithmically.

The event data expected on the ``events`` input should be in the form ``[p1, p3, ...]``.
Note that p2 (start time) is skipped since it's already in the AS event. The
full AS event format would be ``[p2, [p1, p3, ...] ]``.

=== Jack ports ===

Each csound bus will create a corresponding JACK output port for each channel (as defined
by ``nchnls`` in the orchestra). AS will try to autoconnect these ports to the
default soundcard of the system. This might not work on OS X, then you need to manually
connect them in the JACK router.

Currently, the sample rate of csound (``sr`` in the orchestra) **must** be the same as
JACK!

=== Rendering, playback and export ===

Each change that affects the csound bus will make it start rendering audio, this is
visualized by a red transparent bar. You can start playing the audio before it has
finished, but if the play position reaches the non-rendered area of the bus, playback will
be silenced.

With a complicated orchestra and many events, rendering can be slow. To avoid that each
little change in the score triggers the rendering, you can set the ``delay_update``
property of the csound bus to 1. You can now make multiple changes, and press ##Ctrl-U## to update all
objects that are waiting for an update, or ##u## on a single object to update only that
one. All objects in need of update will be seen with the transparent red bar.

To export a csound bus to an audiofile, choose ``File->export bus`` on the menu.

== Control signal bus ==

The ``signal_bus`` samples the incoming numerical values at a given division
of the JACK sample rate, the divisor is set by the ``sr_div`` property. The data is
then upsampled and sent as an audio stream on a JACK signal port.

Any application or DSP environment that can take input from JACK can thus be
controlled by AS, for example PureData, SuperCollider, ChucK, Max/MSP.

A signal bus can also be exported as an audiofile, including raw (headerless)
float data which might be suitable for importing in other applications.

== OSC bus ==

The ``osc_bus`` class creates OpenSoundControl bus objects. Each OSC bus has
an ``osc_address`` property that takes an URL of where to send the messages,
default is 'osc.udp://localhost:7770'.

The ``controllers`` property has a table of inlets and their OSC path and
typetag string. Example:
```
{ note: ['/foo/note', 'iff'],
  foo:  ['/foo/bar',  'f'  ] }
```

If any interpolating output (for example a linseg or jitter object) is connected
to the OSC bus it samples them at the interval specified in the ``resolution``
property of the bus.

See the [description of osc_bus #osc_bus_class] for details.

== MIDI bus ==

The ``midi_bus`` class creates MIDI bus objects. Each MIDI bus creates a
corresponding JACK midi port (Needs recent version of JACK).

The JACK midi ports can then be connected to other software or external hardware
for control of synthesizers or other devices.

Each MIDI bus has properties for channel and JACK port name, and a list of
controllers. It supports 7 and 14 bit controllers, pitchbend and note events.

See the [description of midi_bus #midi_bus_class] for details.
