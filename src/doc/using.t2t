
= Using AlgoScore =[using]
This section gives a detailed view of the user interface and the most important
actions, like creating and connecting objects and editing their properties.

== Score window ==
[score_window.png]

This is the main AS window.
The white area with the timeline and grids is the (now empty) graphical score.

Many actions work by the concept of //soft selection//, this means that an
action is initiated by pressing a key or clicking a mousebutton while pointing
the mousecursor over the object that should be affected.

At the top of the window is the menu where various actions can be performed,
like opening and saving projects, exporting busses to audio, printing to PDF,
etc...

At the bottom of the window is the toolbar. It has buttons to do various actions
(some of which is also available in the menus), a time display of the current
play position, the tool-mode display (here **object**) and the zoom-control.
Holding the mouse cursor over the buttons shows a tooltip with a description of
what that button does.

== Console ==
[console.png]

This is the console, available on the ``Windows->Console`` menu.

It has a text area that display information and error
messages, and a command line where one has access to the built-in nasal
interpreter. This can be used for scripted access to the score and
objects, evaluating nasal expressions, or running external nasal scripts.

== Creating objects ==
[create_object.png]

It is important to understand the concept of classes and objects.
Objects are created from object templates, called //classes//. A class defines
//a kind// of object (like a rectangle, a circle, etc...),
and an object is an instance of its class (//that// rectangle, //that// circle,
etc...).

To create an object, right-click on the score area or press ##n##. The above
window will show up, displaying the list of available classes to the left
and the currently selected class description to the right.
Double-click on the class to create an object of that class.

The objects can be moved around by dragging them with ##button1## (the left
mouse button).
Hold ##shift## while dragging to move in vertical direction only, ##ctrl## for
horizontal direction only.

To copy an object, press ##c## to enter //copy mode// and then drag the object.

To delete an object, press ##delete## or ##backspace## while dragging the object.

== Properties ==[props]
[obj_propbox.png]

Pressing ##p## while holding the mouse cursor over an object brings up the
properties window for that object, where you can inspect and edit the
properties of the object.

Typical properties are start time, length, vertical position, but each class
defines their own available properties. Some classes uses properties for
user-data, for example a vector of numbers to describe a curve.

Pressing ##p## over an empty score area brings up the properties for the score.

== Connecting objects ==
To connect two objects, press ##.## or right-click on the source-object.
This brings up a menu of available outputs (1), choose the output and then click
on the target-object (2), this brings up a menu of available inputs (3),
choose the input. Done! (4)

 (1):[connect_1.png] (2):[connect_2.png] (3):[connect_3.png] (4):[connect_4.png] 

The connections can be moved by dragging them with the left mouse button.
Note that **the graphical placement of connections has no meaning** other than
visually. It's the position of the objects themselves that has meaning.

Connections also has properties, these are accessed by pressing ##p## over a
connection.

=== Transfer functions ===

Each connection has a ``transfunc`` property that can be used to process
values through a Nasal expression. The variable ``x`` in the expression holds
the original value.

For example, to clip the value to -1 and +1: ``math.clip(x, -1, 1)``.
Or to transpose a note event before going to a MIDI bus: ``[x[0]+7,x[1],x[2]]``.

Note that you can have multiple connections from the same outlet, with different
transfer functions, going to different destinations. One might for example
extract only the velocity element from a note event and scale it to 0-1 and
send it to another object: ``x[1]/127``

There are also object classes with a ``transfunc`` property, like all classes
based on ASPlotObj. (linseg, jitter, sine, etc...)

== Alignments and Links ==
An object can be aligned to another object according to the objects
alignmentpoints. This is often only the start and end of an object, but some
objects has more than these two alignmentpoints.

Alignment can be done as a single action, or as a permanent link. 
Links are visualized as dotted vertical lines between objects. Linked objects
will follow each other in the time-direction when one of them is moved.

Pressing ##a## enters //align mode//, all objects will then show their
alignmentpoints visually.

Drag with ##button1## from an alignmentpoint in one object to one in another
object, this will move the first object so that the alignmentpoints occur at the
same time. Hold ##alt## to resize the first object so that it ends at the
alignment.

Drag with ##button3## to align and also create a permanent link between the
objects. ##alt## works with links too, for resizing.

Hold ##shift## and drag with any button to remove a link between objects.

Hold ##control## and drag to only create a link without aligning first.

== Edit mode ==
Double-clicking or pressing ##e## on an object in //object mode// tells the object to initiate user
editing. Some objects will show some special editing window, while some enters
interactive editing mode where they will respond to key and mouse events in the
score. If the object does not support any editing, nothing will happen. (This
usally means that user-input is done through object [properties #props] instead).

If the object uses a special editing window (for example ``datagen``, ``code``
and ``comment`` objects), the tool mode will go back to //object mode// directly
after the editing window has been presented.

If the object supports in-score interactive editing, the object will show a
thicker outline in a different color to indicate that it's in edit mode.
Clicking on another editable object changes edit mode to that object, and
pressing ##escape## or clicking on the score background exits edit mode.
All other events on the object is handled by the object.

== Preferences ==[prefs]
[preferences.png]

This is the main preferences, accessed at ``File->Preferences`` on the menu.
They are saved to ``.algoscorerc`` in your home folder.

**TODO:** Go through each option...

== Printing ==
[printbox.png]

``File->Print to file`` on the menu brings up the print to file dialog. AS can
export to PDF, PostScript or SVG which can then be published on the web or printed to
paper with another application. Title, subtitle and composer can be set with the score
properties.

== Exporting ==

[export_audio.png]

To export a bus to an audiofile or midifile, choose ``File->export bus`` on the menu.
You can then choose the wanted format, encoding and filename.

%!include: commands.t2t
